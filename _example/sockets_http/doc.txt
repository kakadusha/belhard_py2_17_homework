HTTP - 80 порт 
HTTPS - 443 порт

основные сетевые протоколы 
    - UDP - без гарантии доставки
    - TCP - гарантия доставки

 
DHCP сервер - устройство(ПО) выдающее ip адреса другим устройствам

192.168.0.1:8080 - связка ip-адрес и порт - используется для отправки пакета в сеть

192.168.0.1, 192.168.1.1 - как правило адреса домашних сетей
127.0.0.1 - localhost - локальный адрес - внутренний адрес устройства

MAC-адрес - уникальный адрес сетевой карты - задается на заводе

ip v.4 - 0-255.255.255.255
ip v.6 - 3FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF

DNS - система доменных имен - связывает названия сайтов и их ip адреса

Структура HTTP
    1. Стартовая строка (start line) — используется для описания версии используемого
    протокола и другой информации — вроде запрашиваемого ресурса или кода ответа.
    Как можно понять из названия, ее содержимое занимает ровно одну строчку.
    2. HTTP-заголовки (HTTP Headers) — несколько строчек текста в определенном
    формате (ключ:значение), которые либо уточняют запрос, либо описывают содержимое тела
    сообщения.
    3. Пустая строка, которая сообщает, что все метаданные для конкретного запроса или
    ответа были отправлены.
    4. Опциональное тело сообщения, которое содержит данные, связанные с запросом, либо
    документ (например HTML-страницу), передаваемый в ответе.


пример HTTP
    GET /path HTTP/1.1
    Content-Type: text/html; charset=utf-8
    Content-Length: 4
    X-Custom-Header: value


    test



Методы запроса 
    GET Запрос на передачу ресурса.
    HEAD Запрос на передачу ресурса, но сам ресурс в ответе не передается, только заголовки.
    POST Передача данных на сервер для обработки указанного ресурса.
    PUT Размещение ресурса на сервере (если такой ресурс уже есть на сервере, то он замещается).
    DELETE Удаление ресурса на сервере.
    CONNECT Установка соединение с сервером на основе ресурса.
    OPTIONS Запрос поддерживаемых методов HTTP для ресурса и других параметров коммуникации.
    TRACE Запрос на трассировку сообщения: сервер должен включить в свой ответ 
            исходный запрос, на который он отвечает. Это полезно, когда запрос 
            проходит через промежуточные устройства, которые могут изменить запрос, 
            например, добавить заголовки.



Коды состояния
    100 - служебные
    200 - ок
    300 - перенаправление
    400 - ошибка
    500 - ошибка сервера            



Основные Headers в HTTP запросе
User-Agent - Заголовок используется для описания клиента, который 
            запрашивает ресурс. Он содержит достаточно много информации 
            о пользовательском окружении. Например, может указать, какой 
            браузер используется в качестве клиента, его версию, а также 
            операционную систему, на которой этот клиент работает.
Refer - Используется для указания того, откуда поступил текущий запрос. 
            Например, если вы решите перейти по какой-нибудь ссылке в этой 
            статье, то вероятнее всего к запросу будет добавлен заголовок 
            Refer: https://selectel.ru
Accept - Позволяет указать, какой тип медиафайлов принимает клиент. 
            В данном заголовке могут быть указаны несколько типов, 
            перечисленные через запятую (‘ , ‘). А для указания того, 
            что клиент принимает любые типы, используется следующая 
            последовательность — */*.
Cookie - Данный заголовок может содержать в себе одну или несколько 
            пар «Куки-Значение» в формате cookie=value. 
            Куки представляют собой небольшие фрагменты данных, 
            которые хранятся как на стороне клиента, так и на сервере, 
            и выступают в качестве идентификатора. Куки передаются вместе 
            с запросом для поддержания доступа клиента к ресурсу. 
            Помимо этого, куки могут использоваться и для других целей, 
            таких как хранение пользовательских предпочтений на сайте и 
            отслеживание клиентской сессии. 
            Несколько кук в одном заголовке могут быть перечислены 
            с помощью символа точка с запятой (‘ ; ‘), который  
            используется как разделитель.
Authorization - Используется в качестве еще одного метода идентификации 
            клиента на сервере. После успешной идентификации сервер 
            возвращает токен, уникальный для каждого конкретного клиента. 
            В отличие от куки, данный токен хранится исключительно на стороне 
            клиента и отправляется клиентом только по запросу сервера. 
            Существует несколько типов аутентификации, конкретный метод 
            определяется тем веб-сервером или веб-приложением, к которому 
            клиент обращается за ресурсом.
